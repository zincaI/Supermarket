//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SupermarketFinalVersion.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Supermarket7Entities : DbContext
    {
        public Supermarket7Entities()
            : base("name=Supermarket7Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<Producer> Producers { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<Receipt> Receipts { get; set; }
        public virtual DbSet<Receipt_Product> Receipt_Product { get; set; }
        public virtual DbSet<Stock> Stocks { get; set; }
    
        public virtual int AddCategory(string name, ObjectParameter categoryId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddCategory", nameParameter, categoryId);
        }
    
        public virtual int AddEmployee(string name, string password, string type, ObjectParameter employeeId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddEmployee", nameParameter, passwordParameter, typeParameter, employeeId);
        }
    
        public virtual int AddProducer(string name, string country, ObjectParameter producerId)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProducer", nameParameter, countryParameter, producerId);
        }
    
        public virtual int AddProduct(Nullable<int> producerId, Nullable<int> categoryId, string name, Nullable<int> barcode, ObjectParameter productId)
        {
            var producerIdParameter = producerId.HasValue ?
                new ObjectParameter("ProducerId", producerId) :
                new ObjectParameter("ProducerId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var barcodeParameter = barcode.HasValue ?
                new ObjectParameter("Barcode", barcode) :
                new ObjectParameter("Barcode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddProduct", producerIdParameter, categoryIdParameter, nameParameter, barcodeParameter, productId);
        }
    
        public virtual int AddReceipt(Nullable<int> employeeId, Nullable<System.DateTime> date, ObjectParameter receiptId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddReceipt", employeeIdParameter, dateParameter, receiptId);
        }
    
        public virtual int AddReceipt_Product(Nullable<int> productId, Nullable<int> receiptId, Nullable<int> quantity, Nullable<double> totalPrice, ObjectParameter receipt_ProductId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddReceipt_Product", productIdParameter, receiptIdParameter, quantityParameter, totalPriceParameter, receipt_ProductId);
        }
    
        public virtual int AddStock(Nullable<int> productId, Nullable<int> quantity, Nullable<System.DateTime> date, Nullable<double> buyPrice, Nullable<double> sellPrice, Nullable<System.DateTime> expirationDate, ObjectParameter stockId)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var buyPriceParameter = buyPrice.HasValue ?
                new ObjectParameter("BuyPrice", buyPrice) :
                new ObjectParameter("BuyPrice", typeof(double));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("SellPrice", sellPrice) :
                new ObjectParameter("SellPrice", typeof(double));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStock", productIdParameter, quantityParameter, dateParameter, buyPriceParameter, sellPriceParameter, expirationDateParameter, stockId);
        }
    
        public virtual int DeleteCategory(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteCategory", idParameter);
        }
    
        public virtual int DeleteEmployee(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteEmployee", idParameter);
        }
    
        public virtual int DeleteProducer(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProducer", idParameter);
        }
    
        public virtual int DeleteProduct(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteProduct", idParameter);
        }
    
        public virtual int DeleteReceipt(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteReceipt", idParameter);
        }
    
        public virtual int DeleteStock(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStock", idParameter);
        }
    
        public virtual ObjectResult<GetAllCategory_Result> GetAllCategory()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllCategory_Result>("GetAllCategory");
        }
    
        public virtual ObjectResult<GetAllEmployee_Result> GetAllEmployee()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllEmployee_Result>("GetAllEmployee");
        }
    
        public virtual ObjectResult<GetAllProducer_Result> GetAllProducer()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProducer_Result>("GetAllProducer");
        }
    
        public virtual ObjectResult<GetAllProduct_Result> GetAllProduct()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllProduct_Result>("GetAllProduct");
        }
    
        public virtual ObjectResult<GetAllReceipt_Result> GetAllReceipt()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllReceipt_Result>("GetAllReceipt");
        }
    
        public virtual ObjectResult<GetAllReceipt_Product_Result> GetAllReceipt_Product()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllReceipt_Product_Result>("GetAllReceipt_Product");
        }
    
        public virtual ObjectResult<GetAllStock_Result> GetAllStock()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllStock_Result>("GetAllStock");
        }
    
        public virtual int ModifyCategory(Nullable<int> categoryId, string name)
        {
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyCategory", categoryIdParameter, nameParameter);
        }
    
        public virtual int ModifyEmployee(Nullable<int> employeeId, string name, string password, string type)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyEmployee", employeeIdParameter, nameParameter, passwordParameter, typeParameter);
        }
    
        public virtual int ModifyProducer(Nullable<int> producerId, string name, string country)
        {
            var producerIdParameter = producerId.HasValue ?
                new ObjectParameter("ProducerId", producerId) :
                new ObjectParameter("ProducerId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var countryParameter = country != null ?
                new ObjectParameter("Country", country) :
                new ObjectParameter("Country", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyProducer", producerIdParameter, nameParameter, countryParameter);
        }
    
        public virtual int ModifyProduct(Nullable<int> productId, Nullable<int> producerId, Nullable<int> categoryId, string name, Nullable<int> barCode)
        {
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var producerIdParameter = producerId.HasValue ?
                new ObjectParameter("ProducerId", producerId) :
                new ObjectParameter("ProducerId", typeof(int));
    
            var categoryIdParameter = categoryId.HasValue ?
                new ObjectParameter("CategoryId", categoryId) :
                new ObjectParameter("CategoryId", typeof(int));
    
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var barCodeParameter = barCode.HasValue ?
                new ObjectParameter("BarCode", barCode) :
                new ObjectParameter("BarCode", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyProduct", productIdParameter, producerIdParameter, categoryIdParameter, nameParameter, barCodeParameter);
        }
    
        public virtual int ModifyReceipt_Product(Nullable<int> receipt_ProductId, Nullable<int> productId, Nullable<int> receiptId, Nullable<int> quantity, Nullable<double> totalPrice)
        {
            var receipt_ProductIdParameter = receipt_ProductId.HasValue ?
                new ObjectParameter("Receipt_ProductId", receipt_ProductId) :
                new ObjectParameter("Receipt_ProductId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var receiptIdParameter = receiptId.HasValue ?
                new ObjectParameter("ReceiptId", receiptId) :
                new ObjectParameter("ReceiptId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var totalPriceParameter = totalPrice.HasValue ?
                new ObjectParameter("TotalPrice", totalPrice) :
                new ObjectParameter("TotalPrice", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyReceipt_Product", receipt_ProductIdParameter, productIdParameter, receiptIdParameter, quantityParameter, totalPriceParameter);
        }
    
        public virtual int ModifyStock(Nullable<int> stockId, Nullable<int> productId, Nullable<int> quantity, Nullable<System.DateTime> date, Nullable<double> sellPrice, Nullable<System.DateTime> expirationDate)
        {
            var stockIdParameter = stockId.HasValue ?
                new ObjectParameter("StockId", stockId) :
                new ObjectParameter("StockId", typeof(int));
    
            var productIdParameter = productId.HasValue ?
                new ObjectParameter("ProductId", productId) :
                new ObjectParameter("ProductId", typeof(int));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var dateParameter = date.HasValue ?
                new ObjectParameter("Date", date) :
                new ObjectParameter("Date", typeof(System.DateTime));
    
            var sellPriceParameter = sellPrice.HasValue ?
                new ObjectParameter("SellPrice", sellPrice) :
                new ObjectParameter("SellPrice", typeof(double));
    
            var expirationDateParameter = expirationDate.HasValue ?
                new ObjectParameter("ExpirationDate", expirationDate) :
                new ObjectParameter("ExpirationDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ModifyStock", stockIdParameter, productIdParameter, quantityParameter, dateParameter, sellPriceParameter, expirationDateParameter);
        }
    
        public virtual int RestoreCategory(Nullable<int> categoryID)
        {
            var categoryIDParameter = categoryID.HasValue ?
                new ObjectParameter("CategoryID", categoryID) :
                new ObjectParameter("CategoryID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreCategory", categoryIDParameter);
        }
    
        public virtual int RestoreEmployee(Nullable<int> employeeId)
        {
            var employeeIdParameter = employeeId.HasValue ?
                new ObjectParameter("EmployeeId", employeeId) :
                new ObjectParameter("EmployeeId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreEmployee", employeeIdParameter);
        }
    
        public virtual int RestoreProducer(Nullable<int> producerID)
        {
            var producerIDParameter = producerID.HasValue ?
                new ObjectParameter("ProducerID", producerID) :
                new ObjectParameter("ProducerID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreProducer", producerIDParameter);
        }
    
        public virtual int RestoreProduct(Nullable<int> productID)
        {
            var productIDParameter = productID.HasValue ?
                new ObjectParameter("ProductID", productID) :
                new ObjectParameter("ProductID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreProduct", productIDParameter);
        }
    
        public virtual int RestoreReceipt(Nullable<int> receiptID)
        {
            var receiptIDParameter = receiptID.HasValue ?
                new ObjectParameter("ReceiptID", receiptID) :
                new ObjectParameter("ReceiptID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreReceipt", receiptIDParameter);
        }
    
        public virtual int RestoreStock(Nullable<int> stockID)
        {
            var stockIDParameter = stockID.HasValue ?
                new ObjectParameter("StockID", stockID) :
                new ObjectParameter("StockID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("RestoreStock", stockIDParameter);
        }
    }
}
